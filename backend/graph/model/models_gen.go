// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type AllError interface {
	IsAllError()
}

type CommonPageInfo struct {
	TotalCount      int  `json:"totalCount"`
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
}

type ConnectionInput struct {
	First  *int    `json:"first,omitempty"`
	After  *string `json:"after,omitempty"`
	Last   *int    `json:"last,omitempty"`
	Before *string `json:"before,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
}

type CreatePostInput struct {
	Content  string `json:"content" validate:"min=1,max=400"`
	AuthorID string `json:"authorId"`
}

type CreatePostPayload struct {
	Post  *Post  `json:"post"`
	Error *Error `json:"error,omitempty"`
}

type CreateUserInput struct {
	UserName   string  `json:"user_name" validate:"min=1,max=30"`
	ScreenName *string `json:"screen_name,omitempty" validate:"min=3,max=15"`
}

type DeletePostInput struct {
	ID string `json:"id" validate:"len=36"`
}

type DeletePostPayload struct {
	Success bool       `json:"success"`
	Errors  []AllError `json:"errors"`
}

type DeleteUserPayload struct {
	Success bool   `json:"success"`
	Error   *Error `json:"error,omitempty"`
}

type Error struct {
	Message string `json:"message"`
}

func (Error) IsAllError() {}

type ModelInputID struct {
	ID string `json:"id"`
}

type Post struct {
	ID       string `json:"id" validate:"len=36"`
	Content  string `json:"content" validate:"min=1,max=400"`
	Author   *User  `json:"author"`
	AuthorID string `json:"authorId"`
}

type UpdatePostInput struct {
	ID      string `json:"id" validate:"len=36"`
	Content string `json:"content" validate:"min=1,max=400"`
}

type UpdatePostPaylod struct {
	Post  *Post  `json:"post"`
	Error *Error `json:"error,omitempty"`
}

type UpdateUserInput struct {
	UserName   *string `json:"userName,omitempty" validate:"min=1,max=30"`
	ScreenName *string `json:"screenName,omitempty" validate:"min=3,max=15"`
}

type User struct {
	ID         string  `json:"id"`
	UserName   string  `json:"userName"`
	ScreenName string  `json:"screenName"`
	Posts      []*Post `json:"posts" gorm:"foreignKey:AuthorId;references:ID"`
}

type UserPayload struct {
	User  *User  `json:"user,omitempty"`
	Error *Error `json:"error,omitempty"`
}

type GetPostPayload struct {
	Post     *Post           `json:"post,omitempty"`
	PageInfo *CommonPageInfo `json:"pageInfo"`
}

type GetPostsPayload struct {
	Posts    []*Post         `json:"posts"`
	PageInfo *CommonPageInfo `json:"pageInfo"`
}

type GetUserPayload struct {
	User *User `json:"user,omitempty"`
}

type GetUsersPayload struct {
	Users    []*User         `json:"users"`
	PageInfo *CommonPageInfo `json:"pageInfo"`
}
