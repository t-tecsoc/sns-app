type User {
  ID: ID!
  userName: String!
  screenName: String!
  posts: [Post!]! @goField(forceResolver: true) @customTag(key: "gorm", value: "foreignKey-AuthorID")
  # followers: [User!]! @goField(forceResolver: true)
  # followings: [User!]! @goField(forceResolver: true)
}

input CreateUserInput {
  userName: String! @validation(format: "min=1,max=30")
  screenName: String @validation(format: "min=3,max=15")
}

input UpdateUserInput {
  userName: String @validation(format: "min=1,max=30")
  screenName: String @validation(format: "min=3,max=15")
}

type UserPayload {
  user: User
  error: Error
}

type DeleteUserPayload {
  success: Boolean!
  error: Error
}

extend type Mutation {

  createUser(input: CreateUserInput!): UserPayload!

  updateUser(input: UpdateUserInput!): UserPayload!

  deleteUser(input: ModelInputID!): DeleteUserPayload!
}

type getUserPayload {
  user: User
}

type getUsersPayload  implements ListGetter {
  users: [User!]
  pageInfo: CommonPageInfo
  Error: Error
}

extend type Query {
  user(input: ModelInputID!) :getUserPayload!
  users(input: ConnectionInput): getUsersPayload!
}