type User {
  id: ID!
  user_name: String!
  screen_name: String!
  posts: [Post!]!
  # followers: [User!]! @goField(forceResolver: true)
  # followings: [User!]! @goField(forceResolver: true)
}

input CreateUserInput {
  user_name: String! @validation(format: "min=1,max=30")
  screen_name: String @validation(format: "min=3,max=15")
}

input UpdateUserInput {
  user_name: String @validation(format: "min=1,max=30")
  screen_name: String @validation(format: "min=3,max=15")
}

interface UserPayload {
  user: User
  error: Error
}

type CreateUserPayload {
  user: User
  error: Error
}
 
type UpdateUserPayload {
  user: User
  error: Error
}

type DeleteUserPayload {
  success: Boolean!
  error: Error
}

extend type Mutation {

  createUser(input: CreateUserInput!): CreateUserPayload!

  updateUser(input: UpdateUserInput!): UpdateUserPayload!

  deleteUser(input: ModelInputId!): DeleteUserPayload!
}

type getUserPayload {
  user: User
}

type getUsersPayload {
  users: [User]!
  pageInfo: CommonPageInfo!
}

extend type Query {
  getUser(input: ModelInputId!) :getUserPayload!

  getUsers(input: ConnectionInput!): getUsersPayload!
}