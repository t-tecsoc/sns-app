type User {
  id: ID!
  user_name: String!
  screen_name: String!
  posts: [Post]!
  followers: [User]!
  following: [User]!
}

input CreateUserInput {
  user_name: String! @validation(format: "min=1,max=30")
  screen_name: String @validation(format: "min=3,max=15")
}

input UpdateUserInput {
  user_name: String @validation(format: "min=1,max=30")
  screen_name: String @validation(format: "min=3,max=15")
}

input UserIdInput {
  id: ID!
}

interface UserPayload {
  user: User
  errors: [AllError]!
}

type CreateUserPayload {
  user: User
  errors: [AllError]!
}
 
type UpdateUserPayload {
  user: User
  errors: [AllError]!
}

type DeleteUserPayload {
  success: Boolean!
  errors: [AllError]!
}

extend type Mutation {

  createUser(input: CreateUserInput): CreateUserPayload!

  updateUser(input: UpdateUserInput): UpdateUserPayload!

  deleteUser(input: UserIdInput): DeleteUserPayload!
}

type getUserPayload {
  user: User
  pageInfo: CommonPageInfo!
}

type getUsersPayload {
  users: [User]!
  pageInfo: CommonPageInfo!
}

extend type Query {
  getUser(input: UserIdInput) :getUserPayload!

  getUsers(
    after: ID
    before: ID
    first: Int
    last: Int
  ): getUsersPayload!
}