type Post {
  id: ID! @validation(format: "len=36")
  content: String! @validation(format: "min=1,max=400")
  author: User!
  authorId: ID!
  # likes: [User!]! @goField(forceResolver: true)
  # retweets: [User!]! @goField(forceResolver: true)
  # created_at: Time!
}

input CreatePostInput {
  content: String! @validation(format: "min=1,max=400")
  authorId: ID!
}

input UpdatePostInput  {
  id: ID! @validation(format: "len=36")
  content: String! @validation(format: "min=1,max=400")
}

input DeletePostInput {
  id: ID! @validation(format: "len=36")
}

type CreatePostPayload {
  post: Post!
  error: Error
}
type UpdatePostPaylod {
  post: Post!
  error: Error
}

type DeletePostPayload {
  success: Boolean!
  errors: [AllError]!
}

extend type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload!
  updatePost(input: UpdatePostInput!): UpdatePostPaylod!
  deletePost(input: ModelInputId!): DeletePostPayload!
}

type getPostsPayload {
  posts: [Post!]!
  pageInfo: CommonPageInfo!
}

type getPostPayload {
  post: Post
  pageInfo: CommonPageInfo!
}

extend type Query {
  getPost(input: ModelInputId!): getPostPayload

  getPosts(input: ConnectionInput!): getPostsPayload!
}