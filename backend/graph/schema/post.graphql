type Post {
  ID: ID! @validation(format: "len=36")
  content: String! @validation(format: "min=1,max=400")
  author: User! @goField(forceResolver: true)
  authorID: ID!
  # likes: [User!]! @goField(forceResolver: true)
  # retweets: [User!]! @goField(forceResolver: true)
  # created_at: Time!
}

input CreatePostInput {
  content: String! @validation(format: "min=1,max=400")
  authorID: ID!
}

input UpdatePostInput  {
  ID: ID! @validation(format: "len=36")
  content: String! @validation(format: "min=1,max=400")
}

input DeletePostInput {
  ID: ID @validation(format: "len=36")
}

type CreatePostPayload {
  post: Post!
  error: Error
}
type UpdatePostPaylod {
  post: Post!
  error: Error
}

type DeletePostPayload {
  success: Boolean!
  errors: [AllError]!
}

extend type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload!
  updatePost(input: UpdatePostInput!): UpdatePostPaylod!
  deletePost(input: ModelInputID!): DeletePostPayload!
}

type getPostsPayload implements ListGetter {
  posts: [Post!]
  pageInfo: CommonPageInfo
  Error: Error
}

type getPostPayload {
  post: Post
  pageInfo: CommonPageInfo!
}

extend type Query {
  post(input: ModelInputID!): getPostPayload
  posts(input: ConnectionInput!): getPostsPayload!
}