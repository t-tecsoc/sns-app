type Post {
  id: ID! @validation(format: "len=36")
  content: String! @validation(format: "min=1,max=400")
  author: User!
  likes: [User!]!
  retweets: [User!]!
  created_at: Time!
}

input CreatePostInput {
  id: ID! @validation(format: "len=36")
  content: String! @validation(format: "min=1,max=400")
}

input UpdatePostInput  {
  id: ID! @validation(format: "len=36")
  content: String! @validation(format: "min=1,max=400")
}

input DeletePostInput {
  id: ID! @validation(format: "len=36")
}

type CreatePostPayload {
  user: Post!
  errors: [AllError!]
}
type UpdatePostPaylod {
  user: Post!
  errors: [AllError!]
}

type DeletePostPayload {
  success: Boolean!
  errors: [AllError]!
}

extend type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload!
  updatePost(input: UpdatePostInput!): UpdatePostPaylod!
  deletePost(input: ModelInputId!): DeletePostPayload!
}

type getPostsPayload {
  posts: [Post!]
  pageInfo: CommonPageInfo!
}

type getPostPayload {
  post: Post
  pageInfo: CommonPageInfo!
}

extend type Query {
  getPost(input: ModelInputId!): getPostPayload

  getPosts(input: ConnectionInput!): getPostsPayload!
}